generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Themes {
  DARK
  LIGHT
}

enum Colors {
  ORANGE
  BLUE
  RED
  PURPLE
  YELLOW
  GREEN
}

model User {
  // Campos
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String
  color    Colors @default(BLUE)
  theme    Themes @default(LIGHT)

  // Relações
  received_emails Email_User[] @relation("email_correspondants")
  sent_emails     Email[]      @relation("email_sender")

  // Timestamps
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt()
  finished_at DateTime?
}

model Email {
  id                Int       @id @default(autoincrement())
  emailRemente      String
  nomeRemetente     String
  assunto           String
  body              String
  dataEnvio         DateTime  @default(now())
  prioridade        String    @default("NORMAL")
  idMessageResponse String    @default("")
  type              String    @default("DE")
  dataRecebimento   DateTime?
  statusLeitura     Boolean   @default(false)
  boxFolder         String    @default("SENT")
  para              String    @default("")
  cc                String    @default("")
  bcc               String    @default("")

  idUser Int
  from   User @relation("email_sender", fields: [idUser], references: [id])

  // Timestamps
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt()
  finished_at DateTime?

  Email_User Email_User[] @relation("email_correspondants")
}

enum EMAIL_SEND_TYPE {
  TO
  CC
  CCO
}

model Email_User {
  id          Int             @id @default(autoincrement())
  type        EMAIL_SEND_TYPE @default(TO)
  isFavorited Boolean         @default(false)

  // FK
  idEmail Int
  idUser  Int

  // Relações
  email Email @relation("email_correspondants", fields: [idEmail], references: [id])
  user  User  @relation("email_correspondants", fields: [idUser], references: [id])

  // Timestamps
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt()
  finished_at DateTime?
}
